openapi: 3.0.0
info:
  title: Tag API
  description: API for managing tags.
  version: 1.0.0
tags:
  - name: tags
    description: Operations related to tags

servers:
  - url: http://127.0.0.1:9000/api/v1
    description: Development

security:
  - bearerAuth: []

paths:
  /tags:
    get:
      tags:
        - tags
      summary: Get all tags
      description: Returns a list of tags based on the provided query parameters.
      operationId: findAllTags
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Tag name
          example: "electricista"
      responses:
        '200':
          description: A list of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - tags
      summary: Create a new tag
      description: Creates a new tag with the provided data.
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagDto'
      responses:
        '200':
          description: Tag created
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: TAG_CREATED_SUCCESSFULLY
                  data:
                    $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '409':
          description: Tag already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagAlreadyExists'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        
      

components:
  schemas:
    CreateTagDto:
      type: object
      properties:
        name:
          type: string
          example: electricista
      required:
        - name

    FindTagsQueryDto:
      type: object
      properties:
        q:
          type: string
          example: electricista

    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
        name:
          type: string
          example: electricista

    TagAlreadyExists:
      type: object
      properties:
        statusCode:
          type: number
          example: 409
        message:
          type: string
          example: TAG_ALREADY_EXISTS

    UnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: ACCESS_DENIED
        statusCode:
          type: integer
          example: 401

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: INTERNAL_SERVER_ERROR
        statusCode:
          type: integer
          example: 500

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
