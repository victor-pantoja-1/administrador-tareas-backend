openapi: 3.0.0
info:
  title: Roles API
  description: API for managing roles and permissions
  version: 1.0.0

tags:
  - name: roles
    description: Operations related to roles
  
servers:
  - url: http://127.0.0.1:9000/api/v1
    description: Development

security:
  - bearerAuth: []

paths:
  /roles:
    post:
      tags:
        - roles
      summary: Create a new role
      description: Create a new role with the given name, description, and permissions.
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '200':
          description: Role created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: ROLE_CREATED_SUCCESSFULLY
                  data:
                    $ref: '#/components/schemas/Role'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '409':
          description: Role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAlreadyExists'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUnauthorizedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - roles
      summary: Get all roles
      description: Retrieve all roles with optional pagination and search parameters.
      operationId: findAllRoles
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of roles per page
        - in: query
          name: search
          schema:
            type: string
          description: Search query to filter roles by name or description
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessagesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '404':
          description: Role Not Found
          content:
            application/json:
              schema:                
                $ref: '#/components/schemas/RoleNotFound'
              
                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /roles/{id}:
    get:
      tags:
        - roles
      summary: Get role by ID
      description: Retrieve a specific role by its ID.
      operationId: findRoleById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Role ID
      responses:
        '200':
          description: The requested role
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: SUCCESS
                  data:
                    $ref: '#/components/schemas/Role'
              
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - roles
      summary: Update role by ID
      description: Update the role's details (name, description, and permissions) by its ID.
      operationId: updateRole
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Role ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleDto'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: ROLE_UPDATED_SUCCESSFULLY
                  data:
                    $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleNotFound'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUnauthorizedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - roles
      summary: Delete role by ID
      description: Remove a role by its ID.
      operationId: deleteRole
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Role ID
      responses:
        '200':
          description: Role deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: ROLE_DELETED_SUCCESSFULLY
                  data:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '400':
          description: Role in use and cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleInUse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

components:
  schemas:
    CreateRoleDto:
      type: object
      properties:
        name:
          type: string
          example: Admin
        description:
          type: string
          example: This is a description
        permissions:
          type: array
          items:
            type: string
          example: ['1bcb6333-a761-4cfb-a394-60f67e0e9067']
      required:
        - name
        - description

    UpdateRoleDto:
      type: object
      properties:
        name:
          type: string
          example: Admin
        description:
          type: string
          example: This is a description
        permissions:
          type: array
          items:
            type: string
          example: ['1bcb6333-a761-4cfb-a394-60f67e0e9067']

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
        name:
          type: string
          example: Admin
        description:
          type: string
          example: This is a description
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2024-09-05T07:23:44.184Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-09-05T07:23:44.184Z'
        permissions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: '1bcb6333-a761-4cfb-a394-60f67e0e9067'
              target:
                type: string
                example: User
              resource:
                type: string
                example: Create
              createdAt:
                type: string
                format: date-time
                example: '2024-08-07T21:05:52.000Z'
              updatedAt: 
                type: string
                format: date-time
                example: '2024-08-07T21:05:52.000Z'
    RoleSingle:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
        name:
          type: string
          example: Admin
        description:
          type: string
          example: This is a description
        isActive:
          type: boolean
          example: true
        permissions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: '1bcb6333-a761-4cfb-a394-60f67e0e9067'
              target:
                type: string
                example: User
              resource:
                type: string
                example: Create

    PaginatedMessagesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RoleSingle'
        total:
          type: integer
          example: 12
        page:
          type: integer
          example: 1
        lastPage:
          type: integer
          example: 2
        limit:
          type: integer
          example: 10
        hasPrevPage:
          type: boolean
          example: false
        hasNextPage:
          type: boolean
          example: true
        statusCode:
          type: integer
          example: 200
        message:
          type: string
          example: SUCCESS

    RoleAlreadyExists:
      type: object
      properties:
        statusCode:
          type: number
          example: 409
        message:
          type: string
          example: ROLE_ALREADY_EXISTS

    RoleNotFound:
      type: object
      properties:
        statusCode:
          type: number
          example: 404
        message:
          type: string
          example: ROLE_NOT_FOUND

    BadRequest:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
        message:
          type: string
          example: ROLE_MUST_HAVE_PERMISSIONS

    RoleInUse:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
        message:
          type: string
          example: ROLE_IN_USE

    UnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: ACCESS_DENIED
        statusCode:
          type: integer
          example: 401

    UserUnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: USER_NOT_AUTHORIZED
        statusCode:
          type: integer
          example: 403

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: INTERNAL_SERVER_ERROR
        statusCode:
          type: integer
          example: 500

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
